generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id              String          @id @default(cuid())
  name            String
  email           String          @unique
  authId          String          @unique
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  avatarUrl       String?
  lastSeen        DateTime        @default(now())
  createdChannels Channel[]
  channels        ChannelMember[]
  messages        Message[]
}

model Channel {
  id          String          @id @default(cuid())
  name        String?
  description String?
  type        String
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  creatorId   String?
  creator     User?           @relation(fields: [creatorId], references: [id], onDelete: SetNull)
  members     ChannelMember[]
  messages    Message[]
}

model ChannelMember {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  channelId String
  channel   Channel  @relation(fields: [channelId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, channelId])
}

model Message {
  id              String    @id @default(cuid())
  content         String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  senderId        String?
  channelId       String
  parentMessageId String?
  fileUrl         String?
  fileName        String?
  fileType        String?
  fileSize        Int?
  channel         Channel   @relation(fields: [channelId], references: [id], onDelete: Cascade)
  parentMessage   Message?  @relation("ThreadReplies", fields: [parentMessageId], references: [id], onDelete: Cascade)
  replies         Message[] @relation("ThreadReplies")
  sender          User?     @relation(fields: [senderId], references: [id], onDelete: SetNull)
}

model AiChatSession {
  id        String   @id @default(cuid())
  userId    String
  title     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  messages  AiChat[]
}

model AiChat {
  id        String         @id @default(cuid())
  userId    String
  message   String
  response  String
  createdAt DateTime       @default(now())
  sessionId String?
  session   AiChatSession? @relation(fields: [sessionId], references: [id], onDelete: Cascade)
}
